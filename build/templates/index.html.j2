{% extends "base.html.j2" %}

{% block content %}

    <div class="emoji-demos">

        <div class="emoji-demo">
            ğŸŒ¸ğŸŒ¸ğŸŒ¸ğŸŒ¸ğŸŒ¸<br>
            ğŸŒ¸ğŸŒºğŸŒºğŸŒºğŸŒ¸<br>
            ğŸŒ¸ğŸŒºğŸŒ¸ğŸŒºğŸŒ¸<br>
            ğŸŒ¸ğŸŒºğŸŒºğŸŒºğŸŒ¸<br>
            ğŸŒ¸ğŸŒ¸ğŸŒ¸ğŸŒ¸ğŸŒ¸
        </div>
        <div class="emoji-demo">
            ğŸ’«ğŸ’«ğŸ’«ğŸ’«ğŸ’«<br>
            ğŸ’«ğŸ§¡ğŸ§¡ğŸ§¡ğŸ’«<br>
            ğŸ’«ğŸ§¡âœ¨ğŸ§¡ğŸ’«<br>
            ğŸ’«ğŸ§¡ğŸ§¡ğŸ§¡ğŸ’«<br>
            ğŸ’«ğŸ’«ğŸ’«ğŸ’«ğŸ’«
        </div>

        <div class="emoji-demo">
            ğŸŒ»ğŸŒ»ğŸŒ»ğŸŒ»ğŸŒ»<br>
            ğŸŒ»ğŸ’‹ğŸ’‹ğŸ’‹ğŸŒ»<br>
            ğŸŒ»ğŸ’‹ğŸŒ¹ğŸ’‹ğŸŒ»<br>
            ğŸŒ»ğŸ’‹ğŸ’‹ğŸ’‹ğŸŒ»<br>
            ğŸŒ»ğŸŒ»ğŸŒ»ğŸŒ»ğŸŒ»
        </div>

        
    </div>

    <div class="features">
        <div class="feature">
            <h3>&#x2728; {{ _('features.ai_creation.title') }}</h3>
            <p>{{ _('features.ai_creation.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F3A8; {{ _('features.palettes.title') }}</h3>
            <p>{{ _('features.palettes.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F510; {{ _('features.privacy.title') }}</h3>
            <p>{{ _('features.privacy.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F4AC; {{ _('features.emotybot.title') }}</h3>
            <p>{{ _('features.emotybot.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F4E4; {{ _('features.share_export.title') }}</h3>
            <p>{{ _('features.share_export.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F399; {{ _('features.voice_commands.title') }}</h3>
            <p>{{ _('features.voice_commands.description') }}</p>
        </div>
    </div>

    <div class="cta">
        <h2>{{ _('cta.title') }}</h2>
        <p>{{ _('cta.description') }}</p>
        <a href="{{ config.google_play_url }}" class="button">
            {{ _('cta.download_button') }}
        </a>
        <a href="{{ privacy_policy_url }}" class="button secondary">
            {{ _('cta.privacy_button') }}
        </a>
    </div>
{% endblock %}

{% block language_detection %}
{% if language_detection.enabled %}
<script>
/**
 * Emoty Language Detection
 * Automatically redirects users to their preferred language based on browser settings
 */

(function() {
    'use strict';
    
    // Configuration from template
    const config = {
        enabled: {{ language_detection.enabled|lower }},
        frenchLanguageCodes: {{ language_detection.french_language_codes|tojson }},
        storageKey: '{{ language_detection.storage_key }}',
        redirectDelay: {{ language_detection.redirect_delay }},
        frenchUrl: '{{ french_path }}',
        englishUrl: '{{ english_path }}'
    };
    
    // Don't run detection if disabled
    if (!config.enabled) return;
    
    // Don't redirect if this is already a language-specific page
    if (window.location.pathname !== '/') return;
    
    // Check for explicit language choice via URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const langParam = urlParams.get('lang');
    if (langParam) {
        localStorage.setItem(config.storageKey, langParam);
        // Remove the parameter from URL
        if (window.history && window.history.replaceState) {
            window.history.replaceState({}, document.title, window.location.pathname);
        }
        return; // Don't redirect if explicit language chosen
    }
    
    // Don't redirect search engine bots
    const userAgent = navigator.userAgent.toLowerCase();
    const isBot = /bot|crawler|spider|crawling/i.test(userAgent);
    if (isBot) return;
    
    // Check if user has already made a manual language choice
    const storedPreference = localStorage.getItem(config.storageKey);
    if (storedPreference) {
        // User has made a choice, respect it unless they're on wrong page
        if (storedPreference === 'fr' && window.location.pathname === '/') {
            redirect(config.frenchUrl);
        } else if (storedPreference === 'en' && window.location.pathname.startsWith('/fr-FR/')) {
            redirect(config.englishUrl);
        }
        return;
    }
    
    // Don't redirect if user came from internal navigation (language switching)
    const referrer = document.referrer;
    if (referrer && (referrer.includes('emoty.fr') || referrer.includes('localhost'))) {
        // User clicked language switcher, store their choice
        if (referrer.includes('/fr-FR/')) {
            // Coming from French page, user wants English
            localStorage.setItem(config.storageKey, 'en');
        }
        return;
    }
    
    // Get browser languages
    const browserLanguages = navigator.languages || [navigator.language || navigator.userLanguage];
    
    // Check if any browser language matches French
    const prefersFrench = browserLanguages.some(lang => {
        const langCode = lang.toLowerCase();
        return config.frenchLanguageCodes.some(frenchCode => 
            langCode === frenchCode.toLowerCase() || 
            langCode.startsWith(frenchCode.toLowerCase() + '-')
        );
    });
    
    // Redirect to French if preferred
    if (prefersFrench && window.location.pathname === '/') {
        // Store the automatic detection result
        localStorage.setItem(config.storageKey, 'fr');
        redirect(config.frenchUrl);
    } else if (!prefersFrench && window.location.pathname === '/') {
        // Store English preference for consistency
        localStorage.setItem(config.storageKey, 'en');
    }
    
    function redirect(url) {
        if (config.redirectDelay > 0) {
            setTimeout(() => {
                window.location.href = url;
            }, config.redirectDelay);
        } else {
            window.location.href = url;
        }
    }
    
    // Add language switcher event listeners to store preferences
    document.addEventListener('DOMContentLoaded', function() {
        // Find language switcher links
        const langLinks = document.querySelectorAll('a[href="/"], a[href="/fr-FR/"], a[href^="/fr-FR"], a[href="https://emoty.fr/"], a[href="https://emoty.fr/fr-FR/"]');
        
        langLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                const href = this.getAttribute('href');
                if (href === '/' || href === 'https://emoty.fr/') {
                    localStorage.setItem(config.storageKey, 'en');
                } else if (href.includes('/fr-FR')) {
                    localStorage.setItem(config.storageKey, 'fr');
                }
            });
        });
    });
})();
</script>
{% endif %}
{% endblock %}
