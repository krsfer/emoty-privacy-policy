{% extends "base.html.j2" %}

{% block content %}

    <div class="emoji-demos">

        <div class="emoji-demo">
            🌸🌸🌸🌸🌸<br>
            🌸🌺🌺🌺🌸<br>
            🌸🌺🌸🌺🌸<br>
            🌸🌺🌺🌺🌸<br>
            🌸🌸🌸🌸🌸
        </div>
        <div class="emoji-demo">
            💫💫💫💫💫<br>
            💫🧡🧡🧡💫<br>
            💫🧡✨🧡💫<br>
            💫🧡🧡🧡💫<br>
            💫💫💫💫💫
        </div>

        <div class="emoji-demo">
            🌻🌻🌻🌻🌻<br>
            🌻💋💋💋🌻<br>
            🌻💋🌹💋🌻<br>
            🌻💋💋💋🌻<br>
            🌻🌻🌻🌻🌻
        </div>

        
    </div>

    <div class="features">
        <div class="feature">
            <h3>&#x2728; {{ _('features.ai_creation.title') }}</h3>
            <p>{{ _('features.ai_creation.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F3A8; {{ _('features.palettes.title') }}</h3>
            <p>{{ _('features.palettes.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F510; {{ _('features.privacy.title') }}</h3>
            <p>{{ _('features.privacy.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F4AC; {{ _('features.emotybot.title') }}</h3>
            <p>{{ _('features.emotybot.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F4E4; {{ _('features.share_export.title') }}</h3>
            <p>{{ _('features.share_export.description') }}</p>
        </div>
        
        <div class="feature">
            <h3>&#x1F399; {{ _('features.voice_commands.title') }}</h3>
            <p>{{ _('features.voice_commands.description') }}</p>
        </div>
    </div>

    <div class="cta">
        <h2>{{ _('cta.title') }}</h2>
        <p>{{ _('cta.description') }}</p>
        <a href="{{ config.google_play_url }}" class="button">
            {{ _('cta.download_button') }}
        </a>
        <a href="{{ path }}eli5/" class="button secondary">
            🎈 {{ _('cta.eli5_button') }}
        </a>
        <a href="{{ privacy_policy_url }}" class="button secondary">
            {{ _('cta.privacy_button') }}
        </a>
    </div>

    <div class="signup-section">
        <h2>{{ _('signup.title') }}</h2>
        <p>{{ _('signup.description') }}</p>
        
        <form id="signupForm" class="signup-form">
            <div class="form-group">
                <label for="email">{{ _('signup.email_label') }}</label>
                <input type="email" id="email" name="email" required 
                       aria-describedby="email-help" 
                       placeholder="{{ _('signup.email_placeholder') }}">
                <div id="email-help" class="help-text">{{ _('signup.email_help') }}</div>
                <div id="email-error" class="error-message" aria-live="polite"></div>
            </div>
            
            <div class="form-group">
                <label for="username">{{ _('signup.username_label') }}</label>
                <input type="text" id="username" name="username" 
                       aria-describedby="username-help" 
                       placeholder="{{ _('signup.username_placeholder') }}" 
                       maxlength="50">
                <div id="username-help" class="help-text">{{ _('signup.username_help') }}</div>
                <div id="username-error" class="error-message" aria-live="polite"></div>
            </div>
            
            <div class="form-group">
                <label class="checkbox-container">
                    <input type="checkbox" id="consent" name="consent" required aria-describedby="consent-help">
                    <span class="checkmark"></span>
                    {{ _('signup.consent_label') }}
                </label>
                <div id="consent-help" class="help-text">
                    {{ _('signup.consent_help_before') }} <a href="{{ privacy_policy_url }}">{{ _('signup.consent_help_link') }}</a>.
                </div>
                <div id="consent-error" class="error-message" aria-live="polite"></div>
            </div>
            
            <button type="submit" class="button signup-button" id="submitBtn">
                {{ _('signup.button') }}
            </button>
            
            <div id="signup-success" class="success-message" style="display: none;">
                <h3>{{ _('signup.success_title') }}</h3>
                <p>{{ _('signup.success_message_before') }} <span id="confirmed-email"></span>. 
                {{ _('signup.success_message_after') }}</p>
                <p><strong>{{ _('signup.success_important') }}</strong> {{ _('signup.success_expires') }}</p>
                <button type="button" id="resendBtn" class="button secondary" style="display: none;">
                    {{ _('signup.resend_button') }}
                </button>
            </div>
            
            <div id="signup-error" class="error-message" style="display: none;"></div>
        </form>
    </div>
{% endblock %}

{% block language_detection %}
{% if language_detection.enabled %}
<script>
/**
 * Emoty Language Detection
 * Automatically redirects users to their preferred language based on browser settings
 */

(function() {
    'use strict';
    
    // Configuration from template
    const config = {
        enabled: {{ language_detection.enabled|lower }},
        frenchLanguageCodes: {{ language_detection.french_language_codes|tojson }},
        storageKey: '{{ language_detection.storage_key }}',
        redirectDelay: {{ language_detection.redirect_delay }},
        frenchUrl: '{{ french_path }}',
        englishUrl: '{{ english_path }}'
    };
    
    // Don't run detection if disabled
    if (!config.enabled) return;
    
    // Don't redirect if this is already a language-specific page
    if (window.location.pathname !== '/') return;
    
    // Check for explicit language choice via URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const langParam = urlParams.get('lang');
    if (langParam) {
        localStorage.setItem(config.storageKey, langParam);
        // Remove the parameter from URL
        if (window.history && window.history.replaceState) {
            window.history.replaceState({}, document.title, window.location.pathname);
        }
        return; // Don't redirect if explicit language chosen
    }
    
    // Don't redirect search engine bots
    const userAgent = navigator.userAgent.toLowerCase();
    const isBot = /bot|crawler|spider|crawling/i.test(userAgent);
    if (isBot) return;
    
    // Check if user has already made a manual language choice
    const storedPreference = localStorage.getItem(config.storageKey);
    if (storedPreference) {
        // User has made a choice, respect it unless they're on wrong page
        if (storedPreference === 'fr' && window.location.pathname === '/') {
            redirect(config.frenchUrl);
        } else if (storedPreference === 'en' && window.location.pathname.startsWith('/fr-FR/')) {
            redirect(config.englishUrl);
        }
        return;
    }
    
    // Don't redirect if user came from internal navigation (language switching)
    const referrer = document.referrer;
    if (referrer && (referrer.includes('emoty.fr') || referrer.includes('localhost'))) {
        // User clicked language switcher, store their choice
        if (referrer.includes('/fr-FR/')) {
            // Coming from French page, user wants English
            localStorage.setItem(config.storageKey, 'en');
        }
        return;
    }
    
    // Get browser languages
    const browserLanguages = navigator.languages || [navigator.language || navigator.userLanguage];
    
    // Check if any browser language matches French
    const prefersFrench = browserLanguages.some(lang => {
        const langCode = lang.toLowerCase();
        return config.frenchLanguageCodes.some(frenchCode => 
            langCode === frenchCode.toLowerCase() || 
            langCode.startsWith(frenchCode.toLowerCase() + '-')
        );
    });
    
    // Redirect to French if preferred
    if (prefersFrench && window.location.pathname === '/') {
        // Store the automatic detection result
        localStorage.setItem(config.storageKey, 'fr');
        redirect(config.frenchUrl);
    } else if (!prefersFrench && window.location.pathname === '/') {
        // Store English preference for consistency
        localStorage.setItem(config.storageKey, 'en');
    }
    
    function redirect(url) {
        if (config.redirectDelay > 0) {
            setTimeout(() => {
                window.location.href = url;
            }, config.redirectDelay);
        } else {
            window.location.href = url;
        }
    }
    
    // Add language switcher event listeners to store preferences
    document.addEventListener('DOMContentLoaded', function() {
        // Find language switcher links
        const langLinks = document.querySelectorAll('a[href="/"], a[href="/fr-FR/"], a[href^="/fr-FR"], a[href="https://emoty.fr/"], a[href="https://emoty.fr/fr-FR/"]');
        
        langLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                const href = this.getAttribute('href');
                if (href === '/' || href === 'https://emoty.fr/') {
                    localStorage.setItem(config.storageKey, 'en');
                } else if (href.includes('/fr-FR')) {
                    localStorage.setItem(config.storageKey, 'fr');
                }
            });
        });
    });
})();
</script>
{% endif %}
{% endblock %}

{% block signup_script %}
<script>
/**
 * Emoty Beta Signup with Double Opt-in
 * GDPR-compliant signup form with confirmation email process
 */
(function() {
    'use strict';
    
    // Configuration
    const config = {
        // API endpoints for beta signup
        apiEndpoint: 'https://emoty-privacy-policy-production.up.railway.app/api/beta-signup',
        confirmationApiEndpoint: 'https://emoty-privacy-policy-production.up.railway.app/api/resend-confirmation',
        maxRetries: 3,
        retryDelay: 1000,
        confirmationTimeout: 48 * 60 * 60 * 1000, // 48 hours
        storageKey: 'emoty_signup_data_{{ locale }}'
    };
    
    // Translations based on locale
    const translations = {
        {% if locale == 'fr' or locale.startswith('fr-') %}
        emailRequired: "L'adresse email est requise.",
        emailInvalid: 'Veuillez entrer une adresse email valide.',
        consentRequired: 'Tu dois accepter de recevoir des emails pour t\'inscrire aux tests beta.',
        signupInProgress: 'Inscription en cours...',
        signupButton: '{{ _("signup.button") }}',
        resendInProgress: 'Envoi en cours...',
        resendButton: '{{ _("signup.resend_button") }}',
        resendSuccess: 'Email renvoyé !',
        signupError: 'Une erreur est survenue lors de l\'inscription. Veuillez réessayer.',
        emailAlreadyExists: 'Cette adresse email est déjà inscrite ou invalide.',
        rateLimited: 'Trop de tentatives. Veuillez attendre avant de réessayer.',
        noSignupFound: 'Aucune inscription en attente trouvée.',
        resendError: 'Erreur lors du renvoi de l\'email. Veuillez réessayer.',
        confirmationSuccess: 'Inscription confirmée ! Merci de rejoindre le programme beta d\'Emoty.',
        usernameTooLong: 'Le nom d\'utilisateur doit faire 50 caractères ou moins.'
        {% else %}
        emailRequired: 'Email address is required.',
        emailInvalid: 'Please enter a valid email address.',
        consentRequired: 'You must agree to receive emails to sign up for beta testing.',
        signupInProgress: 'Signing up...',
        signupButton: '{{ _("signup.button") }}',
        resendInProgress: 'Sending...',
        resendButton: '{{ _("signup.resend_button") }}',
        resendSuccess: 'Email sent!',
        signupError: 'An error occurred during signup. Please try again.',
        emailAlreadyExists: 'This email address is already registered or invalid.',
        rateLimited: 'Too many attempts. Please wait before trying again.',
        noSignupFound: 'No pending signup found.',
        resendError: 'Error sending email. Please try again.',
        confirmationSuccess: 'Signup confirmed! Thank you for joining the Emoty beta program.',
        usernameTooLong: 'Username must be 50 characters or less.'
        {% endif %}
    };
    
    // DOM elements
    let form, emailInput, usernameInput, consentInput, submitBtn, resendBtn;
    let emailError, usernameError, consentError, signupSuccess, signupError, confirmedEmail;
    
    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
        initializeElements();
        setupEventListeners();
        checkPendingConfirmation();
    });
    
    function initializeElements() {
        form = document.getElementById('signupForm');
        emailInput = document.getElementById('email');
        usernameInput = document.getElementById('username');
        consentInput = document.getElementById('consent');
        submitBtn = document.getElementById('submitBtn');
        resendBtn = document.getElementById('resendBtn');
        emailError = document.getElementById('email-error');
        usernameError = document.getElementById('username-error');
        consentError = document.getElementById('consent-error');
        signupSuccess = document.getElementById('signup-success');
        signupError = document.getElementById('signup-error');
        confirmedEmail = document.getElementById('confirmed-email');
    }
    
    function setupEventListeners() {
        if (!form) return;
        
        form.addEventListener('submit', handleSubmit);
        emailInput.addEventListener('input', clearEmailError);
        emailInput.addEventListener('blur', validateEmail);
        usernameInput.addEventListener('input', clearUsernameError);
        usernameInput.addEventListener('blur', validateUsername);
        consentInput.addEventListener('change', clearConsentError);
        
        if (resendBtn) {
            resendBtn.addEventListener('click', handleResendConfirmation);
        }
    }
    
    function handleSubmit(e) {
        e.preventDefault();
        
        if (!validateForm()) {
            return;
        }
        
        const email = emailInput.value.trim();
        const username = usernameInput ? usernameInput.value.trim() : '';
        const consent = consentInput.checked;
        
        submitSignup(email, username, consent);
    }
    
    function validateForm() {
        let isValid = true;
        
        // Validate email
        if (!validateEmail()) {
            isValid = false;
        }
        
        // Validate username (optional field)
        if (usernameInput) {
            const username = usernameInput.value.trim();
            if (!validateUsername(username)) {
                showUsernameError(translations.usernameTooLong);
                isValid = false;
            } else {
                clearUsernameError();
            }
        }
        
        // Validate consent
        if (!consentInput.checked) {
            showConsentError(translations.consentRequired);
            isValid = false;
        }
        
        return isValid;
    }
    
    function validateEmail() {
        const email = emailInput.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (!email) {
            showEmailError(translations.emailRequired);
            return false;
        }
        
        if (!emailRegex.test(email)) {
            showEmailError(translations.emailInvalid);
            return false;
        }
        
        clearEmailError();
        return true;
    }
    
    function submitSignup(email, username, consent) {
        setFormLoading(true);
        clearErrors();
        
        // Store signup data for potential resend
        const signupData = {
            email: email,
            username: username,
            timestamp: Date.now(),
            confirmed: false
        };
        localStorage.setItem(config.storageKey, JSON.stringify(signupData));
        
        // Prepare the request body
        const requestBody = {
            email: email,
            consent: consent,
            language: '{{ locale.split("-")[0] if "-" in locale else locale }}',
            source: 'beta_signup',
            timestamp: new Date().toISOString()
        };
        
        // Include username only if provided
        if (username) {
            requestBody.username = username;
        }
        
        // Make API call to backend
        fetch(config.apiEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            handleSignupSuccess(email);
        })
        .catch(error => {
            // Fallback to simulation if API is not available (development mode)
            if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                console.warn('API not available, using simulation mode');
                setTimeout(() => handleSignupSuccess(email), 1000);
            } else {
                handleSignupError(error);
            }
        });
    }
    
    function handleSignupSuccess(email) {
        setFormLoading(false);
        confirmedEmail.textContent = email;
        
        // Hide form and show success message
        form.style.display = 'none';
        signupSuccess.style.display = 'block';
        
        // Show resend button after 5 minutes
        setTimeout(() => {
            if (resendBtn) {
                resendBtn.style.display = 'inline-block';
            }
        }, 5 * 60 * 1000);
        
        // Update stored data
        const signupData = JSON.parse(localStorage.getItem(config.storageKey) || '{}');
        signupData.email = email;
        signupData.confirmationSent = Date.now();
        localStorage.setItem(config.storageKey, JSON.stringify(signupData));
    }
    
    function handleSignupError(error) {
        setFormLoading(false);
        
        let errorMessage = translations.signupError;
        
        if (error.message && error.message.includes('400')) {
            errorMessage = translations.emailAlreadyExists;
        } else if (error.message && error.message.includes('429')) {
            errorMessage = translations.rateLimited;
        }
        
        showSignupError(errorMessage);
    }
    
    function handleResendConfirmation() {
        const signupData = JSON.parse(localStorage.getItem(config.storageKey) || '{}');
        
        if (!signupData.email) {
            showSignupError(translations.noSignupFound);
            return;
        }
        
        setResendLoading(true);
        
        // Make resend API call to backend
        fetch(config.confirmationApiEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                email: signupData.email,
                language: '{{ locale.split("-")[0] if "-" in locale else locale }}'
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            setResendLoading(false);
            showResendSuccess();
        })
        .catch(error => {
            // Fallback to simulation if API is not available (development mode)
            if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                console.warn('Resend API not available, using simulation mode');
                setTimeout(() => {
                    setResendLoading(false);
                    showResendSuccess();
                }, 1000);
            } else {
                setResendLoading(false);
                showSignupError(translations.resendError);
            }
        });
    }
    
    function checkPendingConfirmation() {
        const signupData = JSON.parse(localStorage.getItem(config.storageKey) || '{}');
        
        if (signupData.email && signupData.confirmationSent && !signupData.confirmed) {
            const elapsed = Date.now() - signupData.confirmationSent;
            
            if (elapsed < config.confirmationTimeout) {
                // Show pending confirmation state
                confirmedEmail.textContent = signupData.email;
                form.style.display = 'none';
                signupSuccess.style.display = 'block';
                
                // Show resend button if enough time has passed
                if (elapsed > 5 * 60 * 1000 && resendBtn) {
                    resendBtn.style.display = 'inline-block';
                }
            } else {
                // Confirmation expired, clear stored data
                localStorage.removeItem(config.storageKey);
            }
        }
    }
    
    function setFormLoading(loading) {
        submitBtn.disabled = loading;
        submitBtn.textContent = loading ? translations.signupInProgress : translations.signupButton;
        
        if (loading) {
            submitBtn.style.opacity = '0.7';
        } else {
            submitBtn.style.opacity = '1';
        }
    }
    
    function setResendLoading(loading) {
        if (!resendBtn) return;
        
        resendBtn.disabled = loading;
        resendBtn.textContent = loading ? translations.resendInProgress : translations.resendButton;
    }
    
    function showResendSuccess() {
        if (!resendBtn) return;
        
        resendBtn.textContent = translations.resendSuccess;
        resendBtn.style.background = '#28a745';
        
        setTimeout(() => {
            resendBtn.textContent = translations.resendButton;
            resendBtn.style.background = '';
            resendBtn.disabled = false;
        }, 3000);
    }
    
    function showEmailError(message) {
        emailError.textContent = message;
        emailInput.style.borderColor = '#e74c3c';
        emailError.setAttribute('aria-live', 'polite');
    }
    
    function clearEmailError() {
        emailError.textContent = '';
        emailInput.style.borderColor = '';
    }
    
    function showConsentError(message) {
        consentError.textContent = message;
    }
    
    function clearConsentError() {
        consentError.textContent = '';
    }
    
    function validateUsername(username) {
        if (username && username.trim().length > 50) {
            return false;
        }
        return true;
    }
    
    function showUsernameError(message) {
        if (usernameError) {
            usernameError.textContent = message;
            usernameInput.style.borderColor = '#e74c3c';
            usernameError.setAttribute('aria-live', 'polite');
        }
    }
    
    function clearUsernameError() {
        if (usernameError) {
            usernameError.textContent = '';
            usernameInput.style.borderColor = '';
        }
    }
    
    function showSignupError(message) {
        signupError.textContent = message;
        signupError.style.display = 'block';
        signupError.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    
    function clearErrors() {
        clearEmailError();
        clearUsernameError();
        clearConsentError();
        signupError.style.display = 'none';
    }
    
    // Handle confirmation link clicks (if implementing confirmation on same domain)
    function handleConfirmationLink() {
        const urlParams = new URLSearchParams(window.location.search);
        const confirmationToken = urlParams.get('confirm');
        
        if (confirmationToken) {
            // Process confirmation
            const signupData = JSON.parse(localStorage.getItem(config.storageKey) || '{}');
            signupData.confirmed = true;
            signupData.confirmedAt = Date.now();
            localStorage.setItem(config.storageKey, JSON.stringify(signupData));
            
            // Show confirmation success message
            alert(translations.confirmationSuccess);
            
            // Clean up URL
            if (window.history && window.history.replaceState) {
                window.history.replaceState({}, document.title, window.location.pathname);
            }
        }
    }
    
    // Check for confirmation on page load
    handleConfirmationLink();
    
})();
</script>
{% endblock %}
